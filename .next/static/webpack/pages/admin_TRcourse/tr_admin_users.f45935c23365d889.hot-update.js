"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/admin_TRcourse/tr_admin_users",{

/***/ "./src/pages/admin_TRcourse/tr_admin_users.js":
/*!****************************************************!*\
  !*** ./src/pages/admin_TRcourse/tr_admin_users.js ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ TRusers; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _images_Denso_logo_png__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../images/Denso_logo.png */ \"./src/pages/images/Denso_logo.png\");\n/* harmony import */ var firebase_database__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! firebase/database */ \"./node_modules/firebase/database/dist/esm/index.esm.js\");\n/* harmony import */ var _firebase_firebase_conf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../firebase/firebase_conf */ \"./src/firebase/firebase_conf.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_7__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nfunction TRusers() {\n    _s();\n    const [activeMenu, setActiveMenu] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isHealthCareExpanded, setIsHealthCareExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isCourseExpanded, setIsCourseExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [users, setUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [courses, setCourses] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [courseCount, setCourseCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    (0,_firebase_firebase_conf__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n    const fetchCourseUser = async ()=>{\n        try {\n            const response = await fetch(\"/api/course/course_api\", {\n                method: \"GET\"\n            });\n            if (response.ok) {\n                const data = await response.json();\n                setUsers(data);\n            } else {\n                console.error(\"Error:\", response.status, response.statusText);\n            //setMessage('Error occurred while fetching data.');\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n        // setMessage('Error occurred while fetching data.');\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchCourseUser();\n    }, []);\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    const toggleHealthCareMenu = ()=>{\n        setIsHealthCareExpanded(!isHealthCareExpanded);\n        setIsCourseExpanded(false);\n        setActiveMenu(\"healthcare\");\n    };\n    const toggleCourseMenu = ()=>{\n        setIsCourseExpanded(!isCourseExpanded);\n        setIsHealthCareExpanded(false);\n        setActiveMenu(\"trainingcourse\");\n    };\n    const handleMenuClick = (menu)=>{\n        setActiveMenu(menu);\n        setIsHealthCareExpanded(false);\n        setIsCourseExpanded(false);\n        navigateToSection(menu);\n    };\n    const handleSubMenuClick = (menu)=>{\n        setActiveMenu(menu);\n        navigateToSection(menu);\n    };\n    const isMenuActive = (menu)=>{\n        return activeMenu === menu;\n    };\n    const navigateToSection = (menu)=>{\n        switch(menu){\n            case \"about\":\n                router.push(\"../admin_TRcourse/admin_insert\");\n                break;\n            case \"Option 4\":\n                router.push(\"./tr_admin_users\");\n                break;\n            case \"Option 5\":\n                router.push(\"./tr_admin_course\");\n                break;\n            case \"Option 1\":\n                router.push(\"../admin_health/hc_admin_insert\");\n                break;\n            case \"Option 2\":\n                router.push(\"../admin_health/hc_admin_users\");\n                break;\n            case \"Option 3\":\n                router.push(\"../admin_health/hc_admin_list\");\n                break;\n            case \"tr insert\":\n                router.push(\"./tr_admin_insert\");\n                break;\n            // Add more cases for other menu items and corresponding routes\n            default:\n                break;\n        }\n    };\n    // Add this function to handle the onClick event\n    async function handleCourseClick(employeeId) {\n        console.log(employeeId);\n        // Filter the users array to include only courses that match the employeeId\n        const matchingCourses = users.filter((course)=>course.user_id === employeeId);\n        if (matchingCourses.length > 0) {\n            sweetalert2__WEBPACK_IMPORTED_MODULE_7___default().fire({\n                title: \"คอร์สที่เลือก :\",\n                html: \"<ul>\".concat(matchingCourses.map((course)=>\"<li>\".concat(course.course, \" <b>วันที่ : </b>\").concat(course.date, \" <b>เวลา : </b> \").concat(course.time_selected, \"</li> <br>\")).join(\"\"), \"</ul>\"),\n                icon: \"info\"\n            });\n        } else {\n            // Handle case when no matching courses are found\n            sweetalert2__WEBPACK_IMPORTED_MODULE_7___default().fire({\n                title: \"คอร์สที่เลือก :\",\n                text: \"No courses found for this employee.\",\n                icon: \"info\"\n            });\n        }\n    }\n    const uniqueUserIds = new Set(); //For store user_id to check not to duplicate it\n    if (false) {}\n}\n_s(TRusers, \"sg2mifZPwfy78lhLV6GoW6gHta0=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = TRusers;\nvar _c;\n$RefreshReg$(_c, \"TRusers\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/admin_TRcourse/tr_admin_users.js\n"));

/***/ })

});